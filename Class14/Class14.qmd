---
title: "Class 14: RNA-Seq analysis mini-project"
author: "Carly Chang (A16843962)"
format: pdf
toc: true
---

## Background 

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.



## Data Import

```{r}
counts = read.csv("GSE37704_featurecounts.csv", row.names=1)
head(counts)

colData = read.csv("GSE37704_metadata.csv")
head(colData)
```


## Inspect and tidy data

Does the `counts` columns match the `colData` row?

```{r}
colData$id
```


```{r}
colnames(counts)
```

No, the two do not match. The fix here looks to be removing the first "length" column from counts:

```{r}
countData <- counts[,-1] #gives everything except first column
head(countData)
```

Check for matching countData and colData

```{r}
colnames(countData) == colData$id
```

> Q1. How many genes in total?

```{r}
nrow(countData)
```

> Q2. Filter to remove zero count genes (rows where there are zero counts in all columns). How many genes are left?

```{r}
new.countData <- countData[rowSums(countData) > 0,] #row indices where the sum is greater than 0
head(new.countData)
```

```{r}
nrow(new.countData)
```


## Setup for DESeq

```{r}
#| message: false
library(DESeq2)
```

Setup input object for DESeq
```{r}
dds <- DESeqDataSetFromMatrix(new.countData,
                              colData = colData,
                              design = ~condition)
```


## Run DESeq

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```


## Volcano plot of results

```{r}
library(ggplot2)
```
```{r}
mycols <- rep("grey", nrow(res))
mycols[abs(res$log2FoldChange) > 2] <- "blue"
mycols[abs(res$log2FoldChange) > 2 & res$padj > 0.05] <- "red"
```

```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(col=mycols) +
  geom_vline(xintercept=-2,linetype=2) +
  geom_vline(xintercept=2,linetype=2) +
  geom_hline(yintercept=-log(0.05),linetype=2)
```

## Gene annotation

Add gene SYMBOL and ENTREZID
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=rownames(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

head(res)
```

## Pathway Analysis

```{r}
library(gage)
library(gageData)
library(pathview)
```

Input vector for gage:
The main gage() function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

Note that we used the mapIDs() function above to obtain Entrez gene IDs (stored in res\$entrez) and we have the fold change results from DESeq2 analysis (stored in res\$log2FoldChange).

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Load up kegg dataset:
```{r}
data(kegg.sets.hs)
```


Run pathway analysis with KEGG:
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
head(keggres$less, 3)
```


```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
pathview(gene.data=foldchanges, pathway.id="hsa03030")
pathview(gene.data=foldchanges, pathway.id="hsa05130")
```

![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa05130.pathview.png)


## Gene Ontology Analysis

Run pathway analysis with GO:
```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets)

head(gobpres$less)
```

