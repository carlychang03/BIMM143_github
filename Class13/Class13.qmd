---
title: "Class 13: RNA Seq (pt. 1)"
author: "Carly Chang (A16843962)"
format: pdf
---

Today we will analyze datq from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects.

## Import countData and colData

There are two datasets I need to import/read:

- `countData` the transcript counts per gene (rows) int eh different experiments
- `colData` information about the columns (i.e. experiments) in `countData`

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```


We can have a peek at these with `head()`
```{r}
head(counts) #count for each gene across multiple trials
```

```{r}
head(metadata) #trials (control vs treated)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```


> Q2. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)
sum(metadata$dex=="control")
```

There are multiple control and treated groups so we can take the average of both groups and compare.
We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated".

- Extract all "control" columns from the `counts` data
- Find the mean value for each gene in these columns

```{r}
control.inds <- metadata$dex == "control" #returns the indices where dex is control
control.counts <- counts[,control.inds] #returns entire row for each control column
```

```{r}
head(control.counts)
```
Find mean across each row (each gene)
```{r}
control.mean <- rowSums(control.counts)/4 #rowSums find sum across row
head(control.mean)
```

You can also use dplyr:
```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

I could make the code more robust by changing `4` to `ncol(control.counts)` so that it accommodates to any changes to the control experiments.


> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[,treated.inds] 
treated.mean <- rowSums(treated.counts)/ncol(treated.counts)
#treated.mean <- apply(treated.counts,1,mean) #using apply function
head(treated.mean)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts)
```


> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

```{r}
library(ggplot2)
ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.3)
```

point on the diagonal = treatment has no effect
point above diagonal = treated gene has greater expression

There is a lot of overplotting at the lower corner of the graph. Whenever we see data that is so heavily skewed like this, we often log-transform it so we can see what is going on more easily.

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts,log="xy")
```

We most often work in log2 units as this makes the math easier. Doubling the expression in treated will cause a change of 1 in magnitude on the log2 scale. A negative value is a decrease in expression when treated.

We can now add "log2 fold-change" values to our `meancounts` dataset.
```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean) 
head(meancounts)
```

We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either control or treated means - because this will give a NaN (not a number) or infinity log calculation.

> Q8. How many genes are "up" regulated at the common log2 fold-change threshold of +2:

```{r}
to.keep <- rowSums(meancounts[,1:2]==0) == 0
mycounts <- meancounts[to.keep,]
nrow(mycounts)
```

```{r}
up.inds <- mycounts$log2fc >= 2
sum(up.inds, na.rm=T) #remove NA values
```

> Q9. How many genes are "down" regulated at the threshold of -2:

```{r}
down.inds <- mycounts$log2fc <= -2
sum(down.inds, na.rm=T)
```

> Q10. Do you trust these results? Why or why not?

We are missing the statistical significance of the treated vs control because we did not compare the two but rather just looked at magnitude of the individual value.

## DESeq2 analysis

To do this the right way, we need to consider the significance of the differences, not just their magnitude.

```{r}
#| message: false
library(DESeq2)
```

To use this package, it wants countData and colData in a specific format.
```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = metadata,
                              design = ~dex) #comparing between dex conditions (treated vs control)

```

```{r}
dds <- DESeq(dds)
```

Extract my results
```{r}
res <- results (dds)
head(res)
```
adjusted p-value adjusts for false positives (makes it higher than p-value)

Plot of fold-change vs P-value (adjusted for multiple testing):
```{r}
plot(res$log2FoldChange, res$padj)
```
We care about log2FoldChange > 0 and low p-adj

Take to log of the P-value:
```{r}
plot(res$log2FoldChange, log(res$padj)) #Larger magnitude of log(p-adj) = smaller p-adj = more significant
```

We can flip the y-axis by putting a minus sign on it:
```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab = "Log2 Fold-Change", 
     ylab = "-log(p-value)")
```

Makes a volcano plot: higher on y-value = more significant
Points on the right = upregulated genes
 
Let's save our work to date:
```{r}
write.csv(res, file="myresults.csv")
```
 
To finish off, let's make a nicer volcano plot.
 
Add the log2 threshold of +/-2
Add P-value threshold lines at 0.05
Add color to highlight the subset of genes that meet both of the above thresholds
 
```{r}
mycols <- rep("gray", nrow(res)) #color all points in res gray
mycols[abs(res$log2FoldChange) > 2]  <- "red" #color points above and below +/-2 red

inds <- (res$padj < 0.05) & (abs(res$log2FoldChange) > 2)
mycols[inds] <- "blue" #color points below p-value < 0.05 and above & below +/-2 blue


#mycols[res$log2FoldChange > 2] <- "red"
#mycols[res$log2FoldChange < 2] <- "blue"
#mycols[res$padj > 0.05] <- "grey"
```
 
```{r}
ggplot(res) +
  aes(log2FoldChange, -log(res$padj)) +
  geom_point(col=mycols) + 
  geom_vline(xintercept=+2,linetype=3) +
  geom_vline(xintercept=-2,linetype=3) +
  geom_hline(yintercept=-log(0.05),linetype=3)
```
 
 ## Add gene annotation data
 
Now the question is what are the blue paoints in the above volcano plot - i.e. what are the genes most influenced by drug treatment here?
 
```{r}
head(res)
```
 
We will use some Bioconductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids.
 
We can install these packages with: `BiocManager::install()`
 
```{r}
library(AnnotationDbi) #contains functions that maps to different gene identifiers
library(org.Hs.eg.db) # contains all types of identifiers for a gene
```
 
What database identifiers can I translate between here:
```{r}
columns(org.Hs.eg.db)
```
 
We can now use the `mapID()` function to translate/map between these different identifier formats.
 
Let's add SYMBOL, GENENAME (full name), and ENTREZID (NCBI)
```{r}
#Make new column in res with gene symbol
res$symbol <- mapIds(org.Hs.eg.db,
              keys=rownames(res), #column with ENSEMBLE ids
              keytype="ENSEMBL", #translate keytype to column
              column = "SYMBOL")
res$genename <- mapIds(org.Hs.eg.db, keys=rownames(res), keytype="ENSEMBL", column="GENENAME")
res$entrez <- mapIds(org.Hs.eg.db, keys=rownames(res), keytype="ENSEMBL", column="ENTREZID")
head(res)
```

 
## Pathway Analysis
 
Now I know the gene names and their IDs in different databases, I want to know what type of biology they are involved in...
 
This is the job of "pathway analysis" (a.k.a. "gene set enrichment"). Pathway analysis (also known as gene set analysis or over-representation analysis), aims to reduce the complexity of interpreting gene lists via mapping the listed genes to known (i.e. annotated) biological pathways, processes and functions. Overlap between pathway (gene-set) from annotations and differentially expressed genes (DEGs) from res means enriched.
 
There are tons of different BioConductor packages for pathway analysis. Here we use just one of them called **gage** and **pathview** . I will install these packages with `BiocManager::install(c("gage","pathview","gageData"))`

```{r}
library(gage)
library(gageData)
library(pathview)
```

Load up the KEGG genesets
```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs)
```
 
 
We will use these KEGG genesets (a.k.a. pathways) and our `res` results to see what overlaps. To do this, we will use the `gage()` function.

For input `gage()` wants just a vector of importance - in our case FoldChange values.
```{r}
foldchanges <- res$log2FoldChange
```


Vectors in R can have "names" associated to each element that are useful for bookkeeping so we know what a value corresponds to. e.g.
```{r}
x <- c(10,200,20)
names(x) <- c("Barry","Alice","Chondra")
x
```


Let's put names on our `foldchanges` vector - here we will use res$entrez
```{r}
names(foldchanges) <- res$entrez
```


Now we can run "pathway analysis"
```{r}
#Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
head(keggres$less)
```
 
We can get a pathway image file with our genesets highlighted via the `pathview()` function.

```{r}
pathview(foldchanges, pathway.id="hsa05310") #downloads image file for asthma
```
 
 Insert this figure in my report
 
 ![](hsa05310.pathview.png)